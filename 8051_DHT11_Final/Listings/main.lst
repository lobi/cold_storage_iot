C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 12:35:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: G:\Program\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include<reg52.h> 
   2          #include "utils.h"
   3          #include "delay.h"
   4          #include "I2C.h"
   5          #include "eeprom.h"
   6          #include "UART.h"
   7          
   8          #include "DataAccess.h"
   9          #include "LCD8bit.h"
  10          
  11          
  12          #include "LCD16x2_DHT11.h"
  13          
  14          // Control:
  15          unsigned char    // gb: Global
  16              gb_wm = 1,   // working mode
  17             gb_temp[2],  // temperature
  18              gb_hum[2],   // humidity
  19            //  gb_d1on[2],  // device 1 turn on at
  20           //   gb_d1off[2], // device 1 turn off at
  21            //  db_d2on[2],  // device 2 turn on at
  22              gb_d2off[2], // device 2 turn off at
  23              buf2[2],     // buffer size 2
  24              buf4[4],     // buffer size 2
  25              buf16[16];   // bugger size 16, e.g.: for LCD, uart...
  26          gb_i = 0;    // multi purposes, reset before using
  27          char *ptr_buf16 = &buf16;
  28          int i = 0, ms0 = 4, ms1 = 100, ms2 = 200;
  29          
  30          // include other libraries that need to use above defined variables
  31          
  32          void set_sample_data()
  33          {
  34   1        // test set temperature
  35   1        //clearLine(1);
  36   1        //displayText("sample data: ");
  37   1        DA_SetDevice1TurnOnAt("30");
  38   1        DA_SetDevice1TurnOffAt("25");
  39   1        DA_SetTemperature("05");
  40   1        DA_SetHumidity("35");
  41   1        DA_SetDevice2TurnOnAt("50");
  42   1        DA_SetDevice2TurnOffAt("70");
  43   1        //displayText("ok");
  44   1        //Delay_ms(ms2);
  45   1        //clearLine(1);
  46   1      }
  47          
  48          void init(void)
  49          {
  50   1        // LCD
  51   1        initLCD();
  52   1        
  53   1        // Welcome
  54   1        setCursor(0, 0);
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 12:35:53 PAGE 2   

  55   1        displayText("Starting...");
  56   1        
  57   1        // Data Access
  58   1        setCursor(0, 1);
  59   1        displayText("Data: ");
  60   1        EepromEraseAll();
  61   1        DA_Init();
  62   1        displayText("ok");
  63   1        
  64   1        Delay_ms(ms2);
  65   1        clearLine(1);
  66   1        
  67   1        // sample data for testing
  68   1        set_sample_data();
  69   1        
  70   1        displayText("Mode: ");
  71   1        gb_wm = DA_GetWorkingMode();
  72   1        switch(gb_wm)
  73   1        {
  74   2        case '1':
  75   2          displayText("auto");
  76   2          break;
  77   2        case '0':
  78   2          displayText("manual");
  79   2          break;
  80   2        default:
  81   2          displayChar(gb_wm);
  82   2          Delay_ms(8);
  83   2          displayText("NaN");
  84   2          break;
  85   2        }
  86   1      
  87   1        Delay_ms(ms2);
  88   1        clearLine(1);
  89   1        
  90   1        // UART
  91   1        displayText("UART: ");
  92   1        UART_Init();
  93   1        UART_TxString("hello uart 8051");
  94   1        displayText("hello-2!");
  95   1        
  96   1        Delay_ms(ms2 * 2);
  97   1      }
  98          
  99          
 100          void loop(void)
 101          {
 102   1        //char buf2[2];
 103   1        // 1. Refresh DHT11 sensor's data to eeprom
 104   1        Dht_Update();
 105   1        Delay_ms(ms2); //test
 106   1      
 107   1        // 2.1 Read temperature/humidity
 108   1        /*
 109   1        DA_GetHumidity(&gb_hum);
 110   1        DA_GetTemperature(&gb_temp);
 111   1      
 112   1        memset(buf16, 0, 16);
 113   1        sprintf(buf16, "Mem-Hum=%s", gb_hum);
 114   1        clearLine(0);
 115   1        displayText(buf16);
 116   1      
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 12:35:53 PAGE 3   

 117   1        memset(buf16, 0, 16);
 118   1        sprintf(buf16, "Mem-Tem=%s", gb_temp);
 119   1        clearLine(1);
 120   1        displayText(buf16);
 121   1      */
 122   1        // 2.2 Send temperature/humidity to 8266(thingsboard) via UART-TX
 123   1        // send humidity to uart
 124   1        memset(buf16, 0, 16);
 125   1        sprintf(buf16, "003:%s/", gb_hum);
 126   1        UART_Init();
 127   1        UART_TxStr(buf16, 7);
 128   1        Delay_ms(ms0);
 129   1      
 130   1        // send temerature to uart
 131   1        memset(buf16, 0, 16);
 132   1        sprintf(buf16, "004:%s/", gb_hum);
 133   1        UART_Init();
 134   1        UART_TxStr(buf16, 7);
 135   1        Delay_ms(ms2);
 136   1      
 137   1        // 3.1 Read data configuration to control devices
 138   1        // cooling fan: On at
 139   1        /*
 140   1        DA_GetDevice1TurnOnAt(&buf2);
 141   1        memset(buf16, 0, 16);
 142   1        sprintf(buf16, "Mem-d1on=%s", buf2);
 143   1        clearLine(0);
 144   1        displayText(buf16);
 145   1        // cooling fan: Off at
 146   1        DA_GetDevice1TurnOffAt(&buf2);
 147   1        memset(buf16, 0, 16);
 148   1        sprintf(buf16, "Mem-d1off=%s", buf2);
 149   1        clearLine(1);
 150   1        displayText(buf16);
 151   1        Delay_ms(1000);
 152   1        */
 153   1        
 154   1        // Read current temperature & humidity data from eeprom and send it to 8266 via UART-TX
 155   1        clearLine(0);
 156   1        clearLine(1);
 157   1        displayText("+++");
 158   1        Delay_ms(ms2);
 159   1      
 160   1        // 4.1 UART-RX and proceed command if data is available
 161   1          gb_i = 0;
 162   1        if (1) // check if buffer is available
 163   1        {
 164   2          clearLine(0);
 165   2          displayText("RI:");
 166   2          displayChar(RI);
 167   2          
 168   2          UART_Init();
 169   2          gb_i = UART_RXString(ptr_buf16);
 170   2          Delay_ms(850);
 171   2        }
 172   1        
 173   1        clearLine(0);
 174   1        clearLine(1);
 175   1        displayText("---");
 176   1        
 177   1        if (gb_i > 0)
 178   1        {
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 12:35:53 PAGE 4   

 179   2          // Identify the command
 180   2          memset(buf4, 0, 4);
 181   2          for (i = 0; i < 4; i++)
 182   2          {
 183   3            buf4[i] = buf16[i];
 184   3          }
 185   2          
 186   2          clearLine(0);
 187   2          displayText("UART-RX:");
 188   2          clearLine(1);
 189   2          displayText(&buf16);
 190   2          
 191   2          if (strcmp(buf4, "001:") == 0)
 192   2          {
 193   3            // 001: set working mode
 194   3            
 195   3            // update to eeprom
 196   3            gb_wm = buf16[4];
 197   3            DA_SetWorkingMode(gb_wm); // save to eeprom
 198   3            gb_wm = DA_GetWorkingMode(); // check again to make sure it saved to eeprom
 199   3            
 200   3            // generate response
 201   3            stradd(ptr_buf16, "r01:", 0); // response
 202   3            stradd(ptr_buf16, &gb_wm, 4);
 203   3            //stradd(ptr_buf16, 'a', 5);
 204   3            
 205   3            // send reponse to confirm
 206   3            UART_Init();
 207   3            UART_TxStr(ptr_buf16, 5);
 208   3            
 209   3            //Delay_ms(ms2);
 210   3            //clearLine(1);
 211   3            //displayText("sent: 001:");
 212   3            //displayText(ptr_buf16);
 213   3            //Delay_ms(ms2);
 214   3          }
 215   2          else if (strcmp(cmd, "002:") == 0)
 216   2          {
 217   3            // 002: get working mode
 218   3            //gb_wm = DA_GetWorkingMode();
 219   3            
 220   3            // generate response
 221   3            stradd(ptr_buf16, "r02:", 0); // response
 222   3            stradd(ptr_buf16, &gb_wm, 4);
 223   3            //stradd(ptr_buf16, 'a', 5);
 224   3            
 225   3            // send current working mode to uart
 226   3            UART_Init();
 227   3            UART_TxString(ptr_buf16);
 228   3          }
 229   2          
 230   2          Delay_ms(ms0);
 231   2          //clearLine(1);
 232   2        }
 233   1      
 234   1        
 235   1        Delay_ms(ms2);
 236   1      }
 237          
 238          
 239          void main (void)
 240          {
C51 COMPILER V9.60.7.0   MAIN                                                              10/13/2024 12:35:53 PAGE 5   

 241   1        init();
 242   1        while(1)
 243   1        {
 244   2          loop(); 
 245   2        };
 246   1      }
*** WARNING C316 IN LINE 246 OF main.c: unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2352    ----
   CONSTANT SIZE    =    196    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     52      72
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

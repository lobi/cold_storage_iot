#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>

// Thingsboard
// Sending data can either be done over MQTT and the PubSubClient
// or HTTPS and the HTTPClient, when using the ESP32 or ESP8266
#define USING_HTTPS true
#if USING_HTTPS
#include <Arduino_HTTP_Client.h>
#include <ThingsBoardHttp.h>
#else
#include <Arduino_MQTT_Client.h>
#include <ThingsBoard.h>
#endif


/* Wifi configuration */
const char* WIFI_SSID = "BALOI"; //"FAI'S EXAM 2.4GHz"
const char* WIFI_PASSWORD = "0909286456"; //"Fptacademy@2023"

/* Thingsboards configuration */
const char* THINGSBOARD_TOKEN = "MxkQrzcH3l79OPnAN8Q9";
constexpr char THINGSBOARD_SERVER[] = "thingsboard.cloud";
#if USING_HTTPS
constexpr uint16_t THINGSBOARD_PORT = 80U;
#else
constexpr uint16_t THINGSBOARD_PORT = 1883U;
#endif
constexpr char CONNECTING_MSG[] = "Connecting to: (%s) with token (%s)\n";
constexpr char TEMPERATURE_KEY[] = "temperature";
constexpr char HUMIDITY_KEY[] = "humidity";
WiFiClient espClient;
#if USING_HTTPS
// Initalize the Http client instance
Arduino_HTTP_Client httpClient(espClient, THINGSBOARD_SERVER, THINGSBOARD_PORT);
ThingsBoardHttp tb(httpClient, THINGSBOARD_TOKEN, THINGSBOARD_SERVER, THINGSBOARD_PORT);
#else
// Initalize the Mqtt client instance
Arduino_MQTT_Client mqttClient(espClient);
ThingsBoard tb(mqttClient, MAX_MESSAGE_SIZE);
#endif


/*  UART - to transmit & receive serial data with 8051 */
#include <SoftwareSerial.h>
//SoftwareSerial my_uart(3, 1); // RX, TX
SoftwareSerial my_uart(13, 15); // RX, TX


/* DHT for testing first */
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#define DHTPIN 4     // Digital pin connected to the DHT sensor 
// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --
// Pin 15 can work but DHT must be disconnected during program upload.

// Uncomment the type of sensor in use:
#define DHTTYPE    DHT11     // DHT 11
//#define DHTTYPE    DHT22     // DHT 22 (AM2302)

// See guide for details on sensor wiring and usage:
//   https://learn.adafruit.com/dht/overview

DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;


/* Generaal configuration */
constexpr uint32_t SERIAL_DEBUG_BAUD = 115200U;


void init_wifi() {
  Serial.println("Connecting to AP ...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    Serial.println("Connected to AP");
    Serial.println("ESP8266's IP address: ");
    Serial.print(WiFi.localIP());
  }
}

bool reconnect_wifi() {
  // Check to ensure we aren't connected yet
  const wl_status_t status = WiFi.status();
  if (status == WL_CONNECTED) {
    return true;
  }

  // If we aren't establish a new connection to the given WiFi network
  init_wifi();
  return true;
}

void init_dht11() {
  dht.begin();
  Serial.println(F("DHTxx Unified Sensor Example"));
  // Print temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  Serial.println(F("------------------------------------"));
  Serial.println(F("Temperature Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("째C"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("째C"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("째C"));
  Serial.println(F("------------------------------------"));
  // Print humidity sensor details.
  dht.humidity().getSensor(&sensor);
  Serial.println(F("Humidity Sensor"));
  Serial.print  (F("Sensor Type: ")); Serial.println(sensor.name);
  Serial.print  (F("Driver Ver:  ")); Serial.println(sensor.version);
  Serial.print  (F("Unique ID:   ")); Serial.println(sensor.sensor_id);
  Serial.print  (F("Max Value:   ")); Serial.print(sensor.max_value); Serial.println(F("%"));
  Serial.print  (F("Min Value:   ")); Serial.print(sensor.min_value); Serial.println(F("%"));
  Serial.print  (F("Resolution:  ")); Serial.print(sensor.resolution); Serial.println(F("%"));
  Serial.println(F("------------------------------------"));
}

void send_sample_dht_metrics() {
  sensors_event_t event;

  // Get temperature event and print its value.
  Serial.println("Sending temperature data...");
  dht.temperature().getEvent(&event);
  if (isnan(event.temperature)) {
    Serial.println(F("Error reading temperature!"));
  }
  else {
    tb.sendTelemetryData(TEMPERATURE_KEY, event.temperature);
    Serial.print(F("Temperature: "));
    Serial.print(event.temperature);
    Serial.println(F("째C"));
  }

  // Get humidity event and print its value.
  Serial.println("Sending humidity data...");
  dht.humidity().getEvent(&event);
  if (isnan(event.relative_humidity)) {
    Serial.println(F("Error reading humidity!"));
  }
  else {
    tb.sendTelemetryData(HUMIDITY_KEY, event.relative_humidity);
    Serial.print(F("Humidity: "));
    Serial.print(event.relative_humidity);
    Serial.println(F("%"));
  }
}

// Thingsboard, the callback for when a PUBLISH message is received from the server.
void on_message(const char* topic, byte* payload, unsigned int length) {

  Serial.println("On message");

  char json[length + 1];
  strncpy (json, (char*)payload, length);
  json[length] = '\0';

  Serial.print("Topic: ");
  Serial.println(topic);
  Serial.print("Message: ");
  Serial.println(json);
  /*
  // Decode JSON request
  StaticJsonBuffer<200> jsonBuffer;
  //JsonDocument doc;
  JsonObject& data = jsonBuffer.parseObject((char*)json);
  //JsonObject obj = doc.to<JsonObject>();
  //JsonObject data = deserializeJson(doc, (char*)json);

  if (!data.success())
  {
    Serial.println("parseObject() failed");
    return;
  }

  // Check request method
  String methodName = String((const char*)data["method"]);
  Serial.println("parsed methodName: %s", methodName);

  if (methodName.equals("getGpioStatus")) {
    // Reply with GPIO status
    String responseTopic = String(topic);
    responseTopic.replace("request", "response");
    client.publish(responseTopic.c_str(), get_gpio_status().c_str());
  } else if (methodName.equals("setGpioStatus")) {
    // Update GPIO status and reply
    set_gpio_status(data["params"]["pin"], data["params"]["enabled"]);
    String responseTopic = String(topic);
    responseTopic.replace("request", "response");
    client.publish(responseTopic.c_str(), get_gpio_status().c_str());
    client.publish("v1/devices/me/attributes", get_gpio_status().c_str());
  }
  */
}

void setup() {
  // Initalize serial connection for debugging
  Serial.begin(SERIAL_DEBUG_BAUD);

  // wifi
  init_wifi();

  /* UART */
  my_uart.begin(9600); //same with 8051
  my_uart.println("Hello, world?");

  /* DHT11 on ESP8266 - just for testing. In fact, we receive temperature from 8051 via UART */
  init_dht11();

  // Thingsboard callback
  //tb.sendAttributeData(const char *const key, const T &value)
  //tb.sendGetRequest(const char *const path, std::string &response)
  tb.sendGetRequest(const char *const path, std::string &response)
}

void loop() {
  // put your main code here, to run repeatedly:
  delay(500);

  if (!reconnect_wifi()) {
    return;
  }

  #if !USING_HTTPS
  if (!tb.connected()) {
    // Reconnect to the ThingsBoard server,
    // if a connection was disrupted or has not yet been established
    Serial.printf(CONNECTING_MSG, THINGSBOARD_SERVER, TOKEN);
    if (!tb.connect(THINGSBOARD_SERVER, TOKEN, THINGSBOARD_PORT)) {
      #if THINGSBOARD_ENABLE_PROGMEM
        Serial.println(F("Failed to connect"));
      #else
        Serial.println("Failed to connect");
      #endif
      return;
    }
  }
  #endif

  // Just for practice DHT11 on ESP8266, 
  // remove this when use metrics from 8051
  send_sample_dht_metrics();

}
